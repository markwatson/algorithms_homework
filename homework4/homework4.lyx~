#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass hmcpset
\begin_preamble
% info for header block in upper right hand corner
\name{Mark Watson}
\class{CS 4720}
\assignment{Homework \#4}
\duedate{12/05/2011}
\end_preamble
\options boxed, margin=1in
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Problem
\begin_inset ERT
status open

\begin_layout Plain Layout

[Problem 1]
\end_layout

\end_inset

 Edit Distance Problem
\end_layout

\begin_layout Solution
The dynamic programming method I used was the Levenshtein distance algorithm.
 The way the algorithm works is by building a graph with the one string
 on the columns and one on the rows.
 The pseudo code for this algorithm is as follows:
\end_layout

\begin_deeper
\begin_layout LyX-Code
s = string 1, m = length
\end_layout

\begin_layout LyX-Code
t = string 2, n = length
\end_layout

\begin_layout LyX-Code
d = matrix of size m by n
\end_layout

\begin_layout LyX-Code
for i = 0 to n: d[m, i] = i
\end_layout

\begin_layout LyX-Code
for i = 0 to m: d[i, n] = i
\end_layout

\begin_layout LyX-Code
for i = 0 to m:
\end_layout

\begin_deeper
\begin_layout LyX-Code
for j = 0 to n:
\end_layout

\begin_deeper
\begin_layout LyX-Code
if char at s[i] = char at t[j]:
\end_layout

\begin_deeper
\begin_layout LyX-Code
// No change needed
\end_layout

\begin_layout LyX-Code
d[i, j] = d[i - 1, j - 1]
\end_layout

\end_deeper
\begin_layout LyX-Code
else:
\end_layout

\begin_deeper
\begin_layout LyX-Code
d[i, j] = min(
\end_layout

\begin_deeper
\begin_layout LyX-Code
d[i-1, j] + 1,
\end_layout

\begin_layout LyX-Code
d[i, j-1] + 1,
\end_layout

\begin_layout LyX-Code
d[i-1, j-1] + 1
\end_layout

\end_deeper
\begin_layout LyX-Code
)
\end_layout

\end_deeper
\end_deeper
\end_deeper
\end_deeper
\begin_layout Solution
The time complexity for the algorithm can be found by adding up the loops,
 assuming all of the code in the loops are run at some constant time: 
\begin_inset Formula 
\begin{eqnarray*}
T= & \sum_{i=0}^{n}C_{1}+\sum_{i=0}^{m}C_{2}+\sum_{i=0}^{m}\sum_{j=0}^{n}C_{3}\\
= & nC_{1}+mC_{2}+mnC_{3}\\
\in & \theta(mn)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Solution
The implemented algorithm is attached.
 The output looks like this:
\end_layout

\begin_deeper
\begin_layout LyX-Code
> run sport sort
\end_layout

\begin_layout LyX-Code
1
\end_layout

\begin_layout LyX-Code
> run computer commuter
\end_layout

\begin_layout LyX-Code
1
\end_layout

\begin_layout LyX-Code
> run word word
\end_layout

\begin_layout LyX-Code
0
\end_layout

\begin_layout LyX-Code
> run something nothing
\end_layout

\begin_layout LyX-Code
4
\end_layout

\end_deeper
\begin_layout Solution
The first run matches the example in the homework problem; adding one letter
 to 
\begin_inset Quotes eld
\end_inset

sort
\begin_inset Quotes erd
\end_inset

 results in 
\begin_inset Quotes eld
\end_inset

sport
\begin_inset Quotes erd
\end_inset

 and giving an edit distance of 1.
 In 
\begin_inset Quotes eld
\end_inset

computer
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

commuter
\begin_inset Quotes erd
\end_inset

 we can change one letter.
 The third example has the same word and so the edit distance is 0.
 Finally, four edits can be applied to 
\begin_inset Quotes eld
\end_inset

something
\begin_inset Quotes erd
\end_inset

 to get the word 
\begin_inset Quotes eld
\end_inset

nothing
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Problem
\begin_inset ERT
status open

\begin_layout Plain Layout

[Problem 2]
\end_layout

\end_inset

 Making Change
\end_layout

\begin_layout Solution
a) The greedy algorithm for the change problem is simple.
 It starts at the largest coin and goes to the smaller ones, dividing the
 amount by the value of the coin each time.
 For example to find the change for 12 cents it tries dividing by 25 and
 fails.
 Then it divides by 10 and succeeds, subtracting 10 from the running total.
 It then divides the resulting 2 by 5 and fails.
 Finally, it divides thee 2 by 1 and subtracts 2 x 1 from 2 which gives
 0.
 This completes the algorithm run and we get 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $12=1(10)+2(1)$
\end_inset


\begin_inset Quotes erd
\end_inset

.
 The Pseudo code is shown below.
 It needs amount to be set to the amount we're getting change for.
\end_layout

\begin_deeper
\begin_layout LyX-Code
workingAmount = amount
\end_layout

\begin_layout LyX-Code
for each coin:
\end_layout

\begin_deeper
\begin_layout LyX-Code
if workingAmount / coin value > 0:
\end_layout

\begin_deeper
\begin_layout LyX-Code
// We got the number and value of the coin to
\end_layout

\begin_layout LyX-Code
// use for this iteration
\end_layout

\begin_layout LyX-Code
output workingAmount / coin + 
\begin_inset Quotes eld
\end_inset

 * 
\begin_inset Quotes eld
\end_inset

 + coin
\end_layout

\end_deeper
\begin_layout LyX-Code
endif
\end_layout

\begin_layout LyX-Code
workingAmount = workingAmount % coin
\end_layout

\end_deeper
\end_deeper
\begin_layout Solution
The algorithm is simple, and it's time complexity is clearly linearly proportion
al to the number of coins in the currency.
\end_layout

\begin_layout Solution
b) A good example of where the greedy algorithm fails is the English currency
 system before 1971
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
D.
 Pearson, "A polynomial-time algorithm for the change-making problem," Operation
s Research Letters, vol.
 33, no.
 3, pp.
 231-234, May 2005.
 [Online].
 Available: http://dx.doi.org/10.1016/j.orl.2004.06.001
\end_layout

\end_inset

.
 The currency consists of the values: 
\begin_inset Formula $1,3,6,12,24,30,60,$
\end_inset

 and 
\begin_inset Formula $240$
\end_inset

.
 The greedy algorithm fails in the case of finding change for 48 pence,
 which is represented as 
\begin_inset Formula $30+12+6$
\end_inset

, while the optimal choice is 
\begin_inset Formula $24+24$
\end_inset

.
 This problem would also happen for the US currency if we were to add a
 7 cent piece.
 The currency would be 
\begin_inset Formula $25,10,7,5,1$
\end_inset

, and if we wanted to make change for 
\begin_inset Formula $14$
\end_inset

 we could use the greedy algorithm and get 
\begin_inset Formula $10+4(1)$
\end_inset

, while the optimal solution would be 
\begin_inset Formula $2(7)$
\end_inset

.
 It's a good thing there are no 7 cent coins.
\end_layout

\begin_layout Solution
c) The dynamic programming solution to the problem consists of two phases.
 The first phase calculates the coins to use to have the minimum number
 of coins.
 We then loop over the selected coins and find out how many of each one
 we need to use.
 For my implementation I also have a third step that prints out the coins.
 I don't count that in the following pseudo code analysis, since it's not
 part of the core algorithm.
 
\end_layout

\begin_deeper
\begin_layout LyX-Code
for j = 1 until amount + 1:
\end_layout

\begin_deeper
\begin_layout LyX-Code
D[j] = Infinity
\end_layout

\begin_layout LyX-Code
for each coin:
\end_layout

\begin_deeper
\begin_layout LyX-Code
if j > coin and 1 + D[j-coin] < D[j]:
\end_layout

\begin_deeper
\begin_layout LyX-Code
D[j] = 1 + D[j - 1]
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout LyX-Code
i = amount
\end_layout

\begin_layout LyX-Code
while i > 0:
\end_layout

\begin_deeper
\begin_layout LyX-Code
print i
\end_layout

\begin_layout LyX-Code
n = n - D[i]
\end_layout

\end_deeper
\end_deeper
\begin_layout Solution
The time complexity of the code for the first part is easy to find.
 It's simply proportional to the amount times the number of coins in the
 currency.
 The while loop depends on the makeup of the final solution, since the number
 of times that need to be iterated depend on the configuration.
 If we let 
\begin_inset Quotes eld
\end_inset

n
\begin_inset Quotes erd
\end_inset

 be the number of coins, and 
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

 be the amount, we can calculate the worst case time complexity as follows:
\end_layout

\begin_layout Solution
\begin_inset Formula 
\begin{eqnarray*}
T= & n*a*C+a*D\\
\in & O(na)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Solution
The last term comes from the fact that we will not loop more than the amount,
 assuming all coins are of value 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

 in the worst case.
\end_layout

\begin_layout Solution
The implementation for the algorithm is in the same source file as for the
 greedy algorithm.
 Here are several examples where the new algorithm works, and the old one
 does not:
\end_layout

\begin_deeper
\begin_layout Enumerate
Currency: 
\begin_inset Formula $1,3,6,12,24,30,60,$
\end_inset

 and 
\begin_inset Formula $240$
\end_inset

, Amount: 48
\end_layout

\begin_layout Enumerate
Currency: 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
25,10,7,5,1, Amount: 14
\end_layout

\begin_layout Enumerate
Currency: 4,3,1, Amount: 6
\end_layout

\begin_layout Enumerate
Currency: 8,7,1, Amount: 21
\end_layout

\begin_layout Enumerate
Currency: 6,4,1, Amount: 8
\end_layout

\end_deeper
\begin_layout Solution
All of these examples won't work with greedy algorithms, while the dynamic
 programming model will work.
\end_layout

\begin_layout Problem
\begin_inset ERT
status open

\begin_layout Plain Layout

[Problem 3]
\end_layout

\end_inset

 Exponential Time Problems
\end_layout

\begin_layout Solution
See attached sheet.
\end_layout

\begin_layout Problem
\begin_inset ERT
status open

\begin_layout Plain Layout

[Problem 4]
\end_layout

\end_inset

 Extra Credit - Branch-and-Bound
\end_layout

\begin_layout Solution
I implemented a branch and bound knapsack algorithm based on the Levitin
 book.
 I tested it on various input.
\end_layout

\begin_deeper
\begin_layout LyX-Code
--> Size: 4, Items: {(weight=2, value=40),(weight=1, value=1)}
\end_layout

\begin_layout LyX-Code
> run
\end_layout

\begin_layout LyX-Code
Take item: w=2, v=40, v/w=20
\end_layout

\begin_layout LyX-Code
Take item: w=1, v=1, v/w=1 
\end_layout

\begin_layout LyX-Code
--> Size: 10, Items: {
\end_layout

\begin_deeper
\begin_layout LyX-Code
(weight=4, value=40),
\end_layout

\begin_layout LyX-Code
(weight=7, value=42),
\end_layout

\begin_layout LyX-Code
(weight=5, value=25),
\end_layout

\begin_layout LyX-Code
(weight=3, value=12),
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
> run
\end_layout

\begin_layout LyX-Code
Take item: w=7, v=42, v/w=6
\end_layout

\begin_layout LyX-Code
Take item: w=3, v=12, v/w=4 
\end_layout

\end_deeper
\end_body
\end_document
