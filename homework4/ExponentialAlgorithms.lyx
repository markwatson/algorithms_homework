#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass IEEEtran
\begin_preamble
% for subfigures/subtables
\ifCLASSOPTIONcompsoc
\usepackage[caption=false,font=normalsize,labelfont=sf,textfont=sf]{subfig}
\else
\usepackage[caption=false,font=footnotesize]{subfig}
\fi
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbh
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Exponential Algorithms"
\pdf_author "Mark Watson"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Exponential Algorithms
\end_layout

\begin_layout Author
Mark
\begin_inset space ~
\end_inset

Watson
\end_layout

\begin_layout Abstract
This document describes various NP-Complete algorithms.
\end_layout

\begin_layout Keywords
algorithms, np-complete
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
IEEEPARstart{
\end_layout

\end_inset

T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}{
\end_layout

\end_inset

his
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 document covers five different problems that are NP-complete.
\end_layout

\begin_layout Section
Problems
\end_layout

\begin_layout Standard
I'll cover the following problems that have been shown to be classified
 as NP-complete problems.
\end_layout

\begin_layout Enumerate
Knapsack Problem
\end_layout

\begin_layout Enumerate
Traveling Salesman Problem
\end_layout

\begin_layout Enumerate
Subset Sum Problem
\end_layout

\begin_layout Enumerate
Subgraph Isomorphism Problem
\end_layout

\begin_layout Enumerate
Graph Coloring
\end_layout

\begin_layout Subsection
Knapsack Problem
\end_layout

\begin_layout Standard
The knapsack problem is a simple optimization problem trying to maximize
 to value of items included in a storage container with limited space.
 Given a finite list of items, each item has a different value and size.
 The goal is to find the combination of items that has the highest value
 while still fitting in the given space allocation.
 For example, the storage space could be a bugler's bag, and the items could
 be the belongings of some person being robbed.
 The knapsack problem is related to the subset sum problem, which will be
 discussed shortly.
\end_layout

\begin_layout Standard
Given this overview, we can describe the problem in more concrete terms;
 given a bag of size W, a number of item values, 
\begin_inset Formula $v_{i}$
\end_inset

, and a number of item weights, 
\begin_inset Formula $w_{i}$
\end_inset

, we need to find a set of items, {
\begin_inset Formula $p_{1},p_{2},...,p_{j}\}$
\end_inset

 that maximizes 
\begin_inset Formula $v_{i}$
\end_inset

 while keeping sum of the items less than or equal to W.
 In the algorithm I'm discussing here there is only one of each item.
 The problem can also be generalizing to have an infinite amount of each
 item, which is known as the unbounded knapsack problem.
 The bounded knapsack problem can be solved using dynamic programming.
 The unbounded problem is more difficult.
 There are several approximation algorithms that can be used to solve the
 unbounded problem.
 One possible solution is a greedy algorithm proposed by 
\begin_inset CommandInset citation
LatexCommand cite
key "1957"

\end_inset

.
 This algorithm is far from optimal at solving the bounded problem.
\end_layout

\begin_layout Standard
Another way of optimizing the problem is to use dominance relations to throw
 away items we don't need.
 This applies only to the unbounded version of the problem.
\end_layout

\begin_layout Subsection
Traveling Salesman Problem
\end_layout

\begin_layout Standard
The traveling salesman problem is a graph traversal problem.
 Given a non-directed, weighted graph the goal is to find the shortest Hamiltoni
an tour visiting each node once.
 The graph is fully connected with each node visiting every other node.
 The problem can be thought of as a set of cities with a traveling salesman
 trying to find the optimal tour between them.
 The problem has applications in several areas like planning and logistics
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://en.wikipedia.org/wiki/Travelling_salesman_problem
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The problem is NP-complete, so finding a solution using brute force doesn't
 work.
 Approximate solutions involve using iterative heuristics that start with
 a basic solution and then get better and better results.
 A starting algorithm could be a greedy nearest neighbor.
 Optimization involves looking at nodes that are close to each other and
 then swapping them.
 There are other approximation algorithms such as genetic algorithms or
 ant farms to try to obtain the optimal solution, but the Lin–Kernighan–Johnson
 or V-opt heuristics are state of the art.
\end_layout

\begin_layout Subsection
Subset Sum Problem
\end_layout

\begin_layout Standard
The subset sum problem is simply given a set of numbers is there a subset
 that adds up to zero.
 The problem is NP-complete and requires finding all subsets to solve in
 a brute force manor.
 Using a divide and conquer method to solve for each half at once to change
 the algorithm into 
\begin_inset Formula $O(2^{N/2})$
\end_inset

, although it is still exponential.
 
\end_layout

\begin_layout Standard
There are two other ways to solve the problem as well.
 The first is a non-approximate solution using dynamic programming.
 It's order O(P - N), where P is the sum of the positive values and N is
 the sum of the negative values.
 This means the algorithm isn't really polynomial time 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://en.wikipedia.org/wiki/Subset_sum_problem
\end_layout

\end_inset

.
 The other algorithm is a polynomial time approximate algorithm.
 The algorithm doesn't always give the exact result, but it doesn't take
 forever to run since it's polynomial time.
\end_layout

\begin_layout Subsection
Tetris
\end_layout

\begin_layout Standard
In the game of Tetris there are a few NP-complete problems 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://en.wikipedia.org/wiki/Tetris
\end_layout

\end_inset

.
 One of which is maximizing the number of pieces played before a loss, given
 a preset sequence of pieces.
 To find the optimal solution every possibility must be enumerated and then
 tested.
 Since we're trying to fin a maximum we can use other methods to find approximat
e solutions such as branch and bound, etc.
 There aren't any dedicated algorithms for this problem as it isn't particularly
 important.
 
\end_layout

\begin_layout Subsection
Graph Coloring
\end_layout

\begin_layout Standard
Given a graph G with n vertices and some integer k we need to find out if
 G admits a proper vertex coloring with k colors.
 A proper vertex coloring happens when no two adjacent nodes are colored
 the same thing.
 The act of finding a coloring for the graph takes 
\begin_inset Formula $k^{n}$
\end_inset

 using brute force search.
 Using dynamic programming we can get a faster algorithm.
 The best algorithm is Yates algorithm, which runs in 
\begin_inset Formula $O(2^{n}n)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "bibtotoc,/home/mark/texmf/tex/latex/IEEEtran/bibtex/IEEEtran"

\end_inset


\end_layout

\end_body
\end_document
